# -*- mode: ruby -*-
# vi: set ft=ruby :

# Vagrantfile generated by https://github.com/timveil/hdp-vagrant-generator on $generatedDate

#parse( "macros.vm" )

require 'ffi'

Vagrant.configure("2") do |config|
    config.vm.box = "timveil/centos7-hdp-base"
    config.vm.box_check_update = true

    # configure VM
    config.vm.hostname = '$arguments.fqdn'
    config.vm.network "private_network", ip: '$arguments.ip'
    config.vm.provider "virtualbox" do |v|
        v.memory = $arguments.memoryInMegabytes
        v.cpus = $arguments.cores
        v.name = '$arguments.fqdn'
    end

    # configure host updater plugin - https://github.com/cogitatio/vagrant-hostsupdater
    config.hostsupdater.aliases = ["$arguments.hostname"]

    # configure VirtualBox Guest Additions plugin - https://github.com/dotless-de/vagrant-vbguest
    config.vbguest.auto_update = true
    config.vbguest.no_remote = true
    config.vbguest.no_install = false

    # provision VM
    config.vm.provision "Update Hosts File", type: "shell", inline: $updateHostsFile
    config.vm.provision "Pre Install", type: "shell", inline: $preInstall, run: "always"
    config.vm.provision "Install", type: "shell", inline: $install
    config.vm.provision "Check Install Status", type: "shell", path: "vagrant-checkstatus.sh"
    config.vm.provision "Post Install", type: "shell", inline: $postInstall
    config.vm.provision "Install Complete", type: "shell", inline: $installComplete, run: "always"
end

$updateHostsFile = <<SCRIPT

cat > /etc/hosts <<EOF
127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4
::1         localhost localhost.localdomain localhost6 localhost6.localdomain6

$arguments.ip   $arguments.fqdn $arguments.hostname
EOF

SCRIPT

$preInstall = <<SCRIPT

#log("Cleaning Logs")
rm -rf /var/log/ambari-metrics-collector/*
rm -rf /var/log/ambari-metrics-monitor/*
rm -rf /var/log/falcon/*
rm -rf /var/log/flume/*
rm -rf /var/log/hadoop/hdfs/*
rm -rf /var/log/hadoop/mapreduce/*
rm -rf /var/log/hadoop/yarn/*
rm -rf /var/log/hadoop-mapreduce/mapred/*
rm -rf /var/log/hadoop-yarn/yarn/*
rm -rf /var/log/hadoop-yarn/nodemanager/*
rm -rf /var/log/hadoop-httpfs/*
rm -rf /var/log/hbase/*
rm -rf /var/log/hive/*
rm -rf /var/log/kafka/*
rm -rf /var/log/knox/*
rm -rf /var/log/oozie/*
rm -rf /var/log/ranger/admin/*
rm -rf /var/log/ranger/usersync/*
rm -rf /var/log/sqoop/*
rm -rf /var/log/storm/*
rm -rf /var/log/webhcat/*
rm -rf /var/log/zookeeper/*
rm -rf /tmp/hive/*
rm -rf /tmp/hcat/*
rm -rf /tmp/ambari-qa/*
rm -rf /tmp/root/*

SCRIPT

$install = <<SCRIPT

#log("Cleaning YUM")
yum clean all

#log("Deleting YUM History")
yum history new

#if( $arguments.kerberosEnabled )
#log("Installing packages required for Kerberos")
yum install krb5-libs krb5-server krb5-workstation -y

#log("Updating Kerberos /etc/krb5.conf")
sed -i "s/kerberos.example.com/$arguments.fqdn/gI" /etc/krb5.conf
sed -i "s/EXAMPLE.COM/$arguments.kerberosRealm/gI" /etc/krb5.conf
sed -i "s/#//g" /etc/krb5.conf
sed -i "s/EXAMPLE.COM/$arguments.kerberosRealm/gI" /var/kerberos/krb5kdc/kadm5.acl

#log("Starting Kerberos KDC")
kdb5_util create -s -P Bbh2z8HrVx
kadmin.local -q 'addprinc -pw admin admin/admin' -w Bbh2z8HrVx
systemctl start krb5kdc
systemctl enable krb5kdc
systemctl start kadmin
systemctl enable kadmin
#end

#if( $arguments.updateLibraries )
#log("Updating YUM")
yum update -y -q
#end

#log("Getting Ambari YUM Repo from $arguments.ambariRepoUrl")
wget -q $arguments.ambariRepoUrl -O /etc/yum.repos.d/ambari.repo

#log("Installing Ambari Server and Agent")
yum install ambari-server ambari-agent -y

#log("Updating Ambari Agent Hostname")
sed -i "s/^hostname=localhost/hostname=$arguments.fqdn/g" /etc/ambari-agent/conf/ambari-agent.ini

#log("Downloading New MySQL Connector Jar")
wget -q http://dev.mysql.com/get/Downloads/Connector-J/${mysqlVersion}.zip -O /usr/share/java/${mysqlVersion}.zip
cd /usr/share/java
unzip -q ${mysqlVersion}.zip

#log("Running Ambari Server setup")
ambari-server setup -s -j $JAVA_HOME

#log("Updating MySql Connector Jar")
ambari-server setup --jdbc-driver=/usr/share/java/${mysqlVersion}/${mysqlVersion}-bin.jar --jdbc-db=mysql

#if( $arguments.containsSparkComponent() )
#log("Cloning Zepplin and updating stack definition")
git clone https://github.com/hortonworks-gallery/ambari-zeppelin-service.git /var/lib/ambari-server/resources/stacks/HDP/$arguments.stackVersion/services/ZEPPELIN
sed -i.bak '/dependencies for all/a \    "ZEPPELIN_MASTER-START": ["NAMENODE-START", "DATANODE-START"],' /var/lib/ambari-server/resources/stacks/HDP/$arguments.stackVersion/role_command_order.json
#end

#log("Starting Ambari Server")
ambari-server start

#log("Starting Ambari Agent")
ambari-agent start

#log("Sleep...")
sleep 30

#if( $arguments.containsRangerComponent() )
#log("Updating MySQL admin for Ranger")
mysql -e "CREATE USER 'root'@'%' IDENTIFIED BY 'root'"
mysql -e "GRANT ALL PRIVILEGES ON *.* TO 'root'@'%'"
mysql -e "SET PASSWORD FOR 'root'@'127.0.0.1' = PASSWORD('$rootPassword')"
mysql -e "SET PASSWORD FOR 'root'@'$arguments.fqdn' = PASSWORD('$rootPassword')"
mysql -e "SET PASSWORD FOR 'root'@'localhost' = PASSWORD('$rootPassword')"
mysql -e "FLUSH PRIVILEGES"
#end

#log("Executing POST to Create Blueprint")
curl -s --show-error -H "${requestedBy}" -X POST -d '$blueprint' -u admin:admin $arguments.getBlueprintUrl()

#log("Executing POST to Install Cluster")
curl -s --show-error -H "${requestedBy}" -X POST -d '$createCluster' -u admin:admin $arguments.getClusterUrl()

SCRIPT

$postInstall = <<SCRIPT

#log("Adding Admin User")
useradd -G hdfs admin
usermod -a -G users admin
usermod -a -G hadoop admin
usermod -a -G hive admin

#log("Updating Vagrant User")
usermod -a -G users vagrant
usermod -a -G hdfs vagrant
usermod -a -G hadoop vagrant
usermod -a -G hive vagrant

SCRIPT

$installComplete = <<SCRIPT

#log("Cluster is ready!  http://$arguments.fqdn:8080 or http://$arguments.hostname:8080")

SCRIPT